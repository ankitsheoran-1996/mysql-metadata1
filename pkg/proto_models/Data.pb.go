// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: Data.proto

package proto_models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Campaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrderId                    int32   `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	GroupId                    int64   `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ReportGroupId              int32   `protobuf:"varint,5,opt,name=report_group_id,json=reportGroupId,proto3" json:"report_group_id,omitempty"`
	StatusId                   int32   `protobuf:"varint,6,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	HasRep                     int32   `protobuf:"varint,7,opt,name=has_rep,json=hasRep,proto3" json:"has_rep,omitempty"`
	BillOn                     int32   `protobuf:"varint,8,opt,name=bill_on,json=billOn,proto3" json:"bill_on,omitempty"`
	BillingTypeId              int32   `protobuf:"varint,9,opt,name=billing_type_id,json=billingTypeId,proto3" json:"billing_type_id,omitempty"`
	BillingAmount              float32 `protobuf:"fixed32,10,opt,name=billing_amount,json=billingAmount,proto3" json:"billing_amount,omitempty"`
	BookedInventory            int32   `protobuf:"varint,11,opt,name=booked_inventory,json=bookedInventory,proto3" json:"booked_inventory,omitempty"`
	AddOnPercentage            int32   `protobuf:"varint,12,opt,name=add_on_percentage,json=addOnPercentage,proto3" json:"add_on_percentage,omitempty"`
	AddOnReason                string  `protobuf:"bytes,13,opt,name=add_on_reason,json=addOnReason,proto3" json:"add_on_reason,omitempty"`
	RejectionReason            string  `protobuf:"bytes,14,opt,name=rejection_reason,json=rejectionReason,proto3" json:"rejection_reason,omitempty"`
	InventoryToDeliver         int32   `protobuf:"varint,15,opt,name=inventory_to_deliver,json=inventoryToDeliver,proto3" json:"inventory_to_deliver,omitempty"`
	BillingRate                float64 `protobuf:"fixed64,16,opt,name=billing_rate,json=billingRate,proto3" json:"billing_rate,omitempty"`
	BudgetType                 int32   `protobuf:"varint,17,opt,name=budget_type,json=budgetType,proto3" json:"budget_type,omitempty"`
	BudgetValue                float64 `protobuf:"fixed64,18,opt,name=budget_value,json=budgetValue,proto3" json:"budget_value,omitempty"`
	DailyCap                   int32   `protobuf:"varint,19,opt,name=daily_cap,json=dailyCap,proto3" json:"daily_cap,omitempty"`
	DailyImpressionCap         int32   `protobuf:"varint,20,opt,name=daily_impression_cap,json=dailyImpressionCap,proto3" json:"daily_impression_cap,omitempty"`
	DailyClickCap              int32   `protobuf:"varint,21,opt,name=daily_click_cap,json=dailyClickCap,proto3" json:"daily_click_cap,omitempty"`
	DailyInstallCap            int32   `protobuf:"varint,22,opt,name=daily_install_cap,json=dailyInstallCap,proto3" json:"daily_install_cap,omitempty"`
	FrequencyCap               int32   `protobuf:"varint,23,opt,name=frequency_cap,json=frequencyCap,proto3" json:"frequency_cap,omitempty"`
	ResetTimerSeconds          int64   `protobuf:"varint,24,opt,name=reset_timer_seconds,json=resetTimerSeconds,proto3" json:"reset_timer_seconds,omitempty"`
	FrequencyCapAuto           int32   `protobuf:"varint,25,opt,name=frequency_cap_auto,json=frequencyCapAuto,proto3" json:"frequency_cap_auto,omitempty"`
	ResetTimerSecondsAuto      int64   `protobuf:"varint,26,opt,name=reset_timer_seconds_auto,json=resetTimerSecondsAuto,proto3" json:"reset_timer_seconds_auto,omitempty"`
	ReleaseDate                string  `protobuf:"bytes,27,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	EndDate                    string  `protobuf:"bytes,28,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Ecpm                       float64 `protobuf:"fixed64,29,opt,name=ecpm,proto3" json:"ecpm,omitempty"`
	VEcpm                      float64 `protobuf:"fixed64,30,opt,name=v_ecpm,json=vEcpm,proto3" json:"v_ecpm,omitempty"`
	VCpi                       float64 `protobuf:"fixed64,31,opt,name=v_cpi,json=vCpi,proto3" json:"v_cpi,omitempty"`
	Iep                        string  `protobuf:"bytes,32,opt,name=iep,proto3" json:"iep,omitempty"`
	Cep                        string  `protobuf:"bytes,33,opt,name=cep,proto3" json:"cep,omitempty"`
	CepMetadata                string  `protobuf:"bytes,34,opt,name=cep_metadata,json=cepMetadata,proto3" json:"cep_metadata,omitempty"`
	HasCep                     int32   `protobuf:"varint,35,opt,name=has_cep,json=hasCep,proto3" json:"has_cep,omitempty"`
	IsValueAdd                 int32   `protobuf:"varint,36,opt,name=is_value_add,json=isValueAdd,proto3" json:"is_value_add,omitempty"`
	Notes                      string  `protobuf:"bytes,37,opt,name=notes,proto3" json:"notes,omitempty"`
	SubtypeId                  int32   `protobuf:"varint,38,opt,name=subtype_id,json=subtypeId,proto3" json:"subtype_id,omitempty"`
	IsBooked                   int32   `protobuf:"varint,39,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
	TargetingParameters        string  `protobuf:"bytes,40,opt,name=targeting_parameters,json=targetingParameters,proto3" json:"targeting_parameters,omitempty"`
	SubtargetingParameters     string  `protobuf:"bytes,41,opt,name=subtargeting_parameters,json=subtargetingParameters,proto3" json:"subtargeting_parameters,omitempty"`
	SystemTargetingParameters  string  `protobuf:"bytes,42,opt,name=system_targeting_parameters,json=systemTargetingParameters,proto3" json:"system_targeting_parameters,omitempty"`
	CampaignProperties         string  `protobuf:"bytes,43,opt,name=campaign_properties,json=campaignProperties,proto3" json:"campaign_properties,omitempty"`
	VersionCapEnabled          int32   `protobuf:"varint,44,opt,name=version_cap_enabled,json=versionCapEnabled,proto3" json:"version_cap_enabled,omitempty"`
	SubSlots                   string  `protobuf:"bytes,45,opt,name=sub_slots,json=subSlots,proto3" json:"sub_slots,omitempty"`
	IsSelfserve                int32   `protobuf:"varint,46,opt,name=is_selfserve,json=isSelfserve,proto3" json:"is_selfserve,omitempty"`
	IsPaymentSettled           int32   `protobuf:"varint,47,opt,name=is_payment_settled,json=isPaymentSettled,proto3" json:"is_payment_settled,omitempty"`
	PaymentAmount              float64 `protobuf:"fixed64,48,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`
	CreditAmount               float64 `protobuf:"fixed64,49,opt,name=credit_amount,json=creditAmount,proto3" json:"credit_amount,omitempty"`
	CouponAmount               float64 `protobuf:"fixed64,50,opt,name=coupon_amount,json=couponAmount,proto3" json:"coupon_amount,omitempty"`
	UsedPaymentAmount          float64 `protobuf:"fixed64,51,opt,name=used_payment_amount,json=usedPaymentAmount,proto3" json:"used_payment_amount,omitempty"`
	UsedCreditAmount           float64 `protobuf:"fixed64,52,opt,name=used_credit_amount,json=usedCreditAmount,proto3" json:"used_credit_amount,omitempty"`
	UsedCouponAmount           float64 `protobuf:"fixed64,53,opt,name=used_coupon_amount,json=usedCouponAmount,proto3" json:"used_coupon_amount,omitempty"`
	BilledInventory            int32   `protobuf:"varint,54,opt,name=billed_inventory,json=billedInventory,proto3" json:"billed_inventory,omitempty"`
	BilledPayment              float64 `protobuf:"fixed64,55,opt,name=billed_payment,json=billedPayment,proto3" json:"billed_payment,omitempty"`
	RequiresApproval           int32   `protobuf:"varint,56,opt,name=requires_approval,json=requiresApproval,proto3" json:"requires_approval,omitempty"`
	IsRedFlagged               int32   `protobuf:"varint,57,opt,name=is_red_flagged,json=isRedFlagged,proto3" json:"is_red_flagged,omitempty"`
	DeliveryType               int32   `protobuf:"varint,58,opt,name=delivery_type,json=deliveryType,proto3" json:"delivery_type,omitempty"`
	DeliveryPriority           int32   `protobuf:"varint,59,opt,name=delivery_priority,json=deliveryPriority,proto3" json:"delivery_priority,omitempty"`
	Version                    int32   `protobuf:"varint,60,opt,name=version,proto3" json:"version,omitempty"`
	CrId                       int32   `protobuf:"varint,61,opt,name=cr_id,json=crId,proto3" json:"cr_id,omitempty"`
	Data                       string  `protobuf:"bytes,62,opt,name=data,proto3" json:"data,omitempty"`
	NthImp                     string  `protobuf:"bytes,63,opt,name=nth_imp,json=nthImp,proto3" json:"nth_imp,omitempty"`
	Variance                   float64 `protobuf:"fixed64,64,opt,name=variance,proto3" json:"variance,omitempty"`
	Mean                       float64 `protobuf:"fixed64,65,opt,name=mean,proto3" json:"mean,omitempty"`
	DeliverySlabCtr            string  `protobuf:"bytes,66,opt,name=delivery_slab_ctr,json=deliverySlabCtr,proto3" json:"delivery_slab_ctr,omitempty"`
	CreatedAt                  string  `protobuf:"bytes,67,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                  string  `protobuf:"bytes,68,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt                  string  `protobuf:"bytes,69,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	OnboardedAt                string  `protobuf:"bytes,70,opt,name=onboarded_at,json=onboardedAt,proto3" json:"onboarded_at,omitempty"`
	CreatedBy                  int32   `protobuf:"varint,71,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CurrentCtr                 float64 `protobuf:"fixed64,72,opt,name=current_ctr,json=currentCtr,proto3" json:"current_ctr,omitempty"`
	ZoneCtr                    string  `protobuf:"bytes,73,opt,name=zone_ctr,json=zoneCtr,proto3" json:"zone_ctr,omitempty"`
	OptimizationTypeId         int32   `protobuf:"varint,74,opt,name=optimization_type_id,json=optimizationTypeId,proto3" json:"optimization_type_id,omitempty"`
	DeliverFrom                int32   `protobuf:"varint,75,opt,name=deliver_from,json=deliverFrom,proto3" json:"deliver_from,omitempty"`
	RoDate                     string  `protobuf:"bytes,76,opt,name=ro_date,json=roDate,proto3" json:"ro_date,omitempty"`
	CreativesType              string  `protobuf:"bytes,77,opt,name=creatives_type,json=creativesType,proto3" json:"creatives_type,omitempty"`
	PerfBiddingRate            int32   `protobuf:"varint,78,opt,name=perf_bidding_rate,json=perfBiddingRate,proto3" json:"perf_bidding_rate,omitempty"`
	VBillingRate               float64 `protobuf:"fixed64,79,opt,name=v_billing_rate,json=vBillingRate,proto3" json:"v_billing_rate,omitempty"`
	LeadId                     int32   `protobuf:"varint,80,opt,name=lead_id,json=leadId,proto3" json:"lead_id,omitempty"`
	OptimizationEntityId       int32   `protobuf:"varint,81,opt,name=optimization_entity_id,json=optimizationEntityId,proto3" json:"optimization_entity_id,omitempty"`
	ContextTargetingParameters string  `protobuf:"bytes,82,opt,name=context_targeting_parameters,json=contextTargetingParameters,proto3" json:"context_targeting_parameters,omitempty"`
	ThirdPartySource           int32   `protobuf:"varint,83,opt,name=third_party_source,json=thirdPartySource,proto3" json:"third_party_source,omitempty"`
	Tqi                        float64 `protobuf:"fixed64,84,opt,name=tqi,proto3" json:"tqi,omitempty"`
	IntradayOsi                float64 `protobuf:"fixed64,85,opt,name=intraday_osi,json=intradayOsi,proto3" json:"intraday_osi,omitempty"`
	HasKeywordTargeting        int32   `protobuf:"varint,86,opt,name=has_keyword_targeting,json=hasKeywordTargeting,proto3" json:"has_keyword_targeting,omitempty"`
	ClicksToDeliver            int32   `protobuf:"varint,87,opt,name=clicks_to_deliver,json=clicksToDeliver,proto3" json:"clicks_to_deliver,omitempty"`
	IsContentCampaign          int32   `protobuf:"varint,88,opt,name=is_content_campaign,json=isContentCampaign,proto3" json:"is_content_campaign,omitempty"`
	CampaignClassificationId   int32   `protobuf:"varint,89,opt,name=campaign_classification_id,json=campaignClassificationId,proto3" json:"campaign_classification_id,omitempty"`
	CxInventoryHonoured        int32   `protobuf:"varint,90,opt,name=cx_inventory_honoured,json=cxInventoryHonoured,proto3" json:"cx_inventory_honoured,omitempty"`
	DanTargetingParameters     string  `protobuf:"bytes,91,opt,name=dan_targeting_parameters,json=danTargetingParameters,proto3" json:"dan_targeting_parameters,omitempty"`
	PerfSliderValue            string  `protobuf:"bytes,92,opt,name=perf_slider_value,json=perfSliderValue,proto3" json:"perf_slider_value,omitempty"`
	DeliveryModeId             int32   `protobuf:"varint,93,opt,name=delivery_mode_id,json=deliveryModeId,proto3" json:"delivery_mode_id,omitempty"`
	CxPacedReachMaximised      int32   `protobuf:"varint,94,opt,name=cx_paced_reach_maximised,json=cxPacedReachMaximised,proto3" json:"cx_paced_reach_maximised,omitempty"`
	SecondaryGoalBillingRate   float64 `protobuf:"fixed64,95,opt,name=secondary_goal_billing_rate,json=secondaryGoalBillingRate,proto3" json:"secondary_goal_billing_rate,omitempty"`
	HostAppId                  string  `protobuf:"bytes,96,opt,name=host_app_id,json=hostAppId,proto3" json:"host_app_id,omitempty"`
	OptimizationGroupId        string  `protobuf:"bytes,97,opt,name=optimization_group_id,json=optimizationGroupId,proto3" json:"optimization_group_id,omitempty"`
}

func (x *Campaign) Reset() {
	*x = Campaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Campaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaign) ProtoMessage() {}

func (x *Campaign) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Campaign.ProtoReflect.Descriptor instead.
func (*Campaign) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{0}
}

func (x *Campaign) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Campaign) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Campaign) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *Campaign) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Campaign) GetReportGroupId() int32 {
	if x != nil {
		return x.ReportGroupId
	}
	return 0
}

func (x *Campaign) GetStatusId() int32 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *Campaign) GetHasRep() int32 {
	if x != nil {
		return x.HasRep
	}
	return 0
}

func (x *Campaign) GetBillOn() int32 {
	if x != nil {
		return x.BillOn
	}
	return 0
}

func (x *Campaign) GetBillingTypeId() int32 {
	if x != nil {
		return x.BillingTypeId
	}
	return 0
}

func (x *Campaign) GetBillingAmount() float32 {
	if x != nil {
		return x.BillingAmount
	}
	return 0
}

func (x *Campaign) GetBookedInventory() int32 {
	if x != nil {
		return x.BookedInventory
	}
	return 0
}

func (x *Campaign) GetAddOnPercentage() int32 {
	if x != nil {
		return x.AddOnPercentage
	}
	return 0
}

func (x *Campaign) GetAddOnReason() string {
	if x != nil {
		return x.AddOnReason
	}
	return ""
}

func (x *Campaign) GetRejectionReason() string {
	if x != nil {
		return x.RejectionReason
	}
	return ""
}

func (x *Campaign) GetInventoryToDeliver() int32 {
	if x != nil {
		return x.InventoryToDeliver
	}
	return 0
}

func (x *Campaign) GetBillingRate() float64 {
	if x != nil {
		return x.BillingRate
	}
	return 0
}

func (x *Campaign) GetBudgetType() int32 {
	if x != nil {
		return x.BudgetType
	}
	return 0
}

func (x *Campaign) GetBudgetValue() float64 {
	if x != nil {
		return x.BudgetValue
	}
	return 0
}

func (x *Campaign) GetDailyCap() int32 {
	if x != nil {
		return x.DailyCap
	}
	return 0
}

func (x *Campaign) GetDailyImpressionCap() int32 {
	if x != nil {
		return x.DailyImpressionCap
	}
	return 0
}

func (x *Campaign) GetDailyClickCap() int32 {
	if x != nil {
		return x.DailyClickCap
	}
	return 0
}

func (x *Campaign) GetDailyInstallCap() int32 {
	if x != nil {
		return x.DailyInstallCap
	}
	return 0
}

func (x *Campaign) GetFrequencyCap() int32 {
	if x != nil {
		return x.FrequencyCap
	}
	return 0
}

func (x *Campaign) GetResetTimerSeconds() int64 {
	if x != nil {
		return x.ResetTimerSeconds
	}
	return 0
}

func (x *Campaign) GetFrequencyCapAuto() int32 {
	if x != nil {
		return x.FrequencyCapAuto
	}
	return 0
}

func (x *Campaign) GetResetTimerSecondsAuto() int64 {
	if x != nil {
		return x.ResetTimerSecondsAuto
	}
	return 0
}

func (x *Campaign) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Campaign) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Campaign) GetEcpm() float64 {
	if x != nil {
		return x.Ecpm
	}
	return 0
}

func (x *Campaign) GetVEcpm() float64 {
	if x != nil {
		return x.VEcpm
	}
	return 0
}

func (x *Campaign) GetVCpi() float64 {
	if x != nil {
		return x.VCpi
	}
	return 0
}

func (x *Campaign) GetIep() string {
	if x != nil {
		return x.Iep
	}
	return ""
}

func (x *Campaign) GetCep() string {
	if x != nil {
		return x.Cep
	}
	return ""
}

func (x *Campaign) GetCepMetadata() string {
	if x != nil {
		return x.CepMetadata
	}
	return ""
}

func (x *Campaign) GetHasCep() int32 {
	if x != nil {
		return x.HasCep
	}
	return 0
}

func (x *Campaign) GetIsValueAdd() int32 {
	if x != nil {
		return x.IsValueAdd
	}
	return 0
}

func (x *Campaign) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Campaign) GetSubtypeId() int32 {
	if x != nil {
		return x.SubtypeId
	}
	return 0
}

func (x *Campaign) GetIsBooked() int32 {
	if x != nil {
		return x.IsBooked
	}
	return 0
}

func (x *Campaign) GetTargetingParameters() string {
	if x != nil {
		return x.TargetingParameters
	}
	return ""
}

func (x *Campaign) GetSubtargetingParameters() string {
	if x != nil {
		return x.SubtargetingParameters
	}
	return ""
}

func (x *Campaign) GetSystemTargetingParameters() string {
	if x != nil {
		return x.SystemTargetingParameters
	}
	return ""
}

func (x *Campaign) GetCampaignProperties() string {
	if x != nil {
		return x.CampaignProperties
	}
	return ""
}

func (x *Campaign) GetVersionCapEnabled() int32 {
	if x != nil {
		return x.VersionCapEnabled
	}
	return 0
}

func (x *Campaign) GetSubSlots() string {
	if x != nil {
		return x.SubSlots
	}
	return ""
}

func (x *Campaign) GetIsSelfserve() int32 {
	if x != nil {
		return x.IsSelfserve
	}
	return 0
}

func (x *Campaign) GetIsPaymentSettled() int32 {
	if x != nil {
		return x.IsPaymentSettled
	}
	return 0
}

func (x *Campaign) GetPaymentAmount() float64 {
	if x != nil {
		return x.PaymentAmount
	}
	return 0
}

func (x *Campaign) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *Campaign) GetCouponAmount() float64 {
	if x != nil {
		return x.CouponAmount
	}
	return 0
}

func (x *Campaign) GetUsedPaymentAmount() float64 {
	if x != nil {
		return x.UsedPaymentAmount
	}
	return 0
}

func (x *Campaign) GetUsedCreditAmount() float64 {
	if x != nil {
		return x.UsedCreditAmount
	}
	return 0
}

func (x *Campaign) GetUsedCouponAmount() float64 {
	if x != nil {
		return x.UsedCouponAmount
	}
	return 0
}

func (x *Campaign) GetBilledInventory() int32 {
	if x != nil {
		return x.BilledInventory
	}
	return 0
}

func (x *Campaign) GetBilledPayment() float64 {
	if x != nil {
		return x.BilledPayment
	}
	return 0
}

func (x *Campaign) GetRequiresApproval() int32 {
	if x != nil {
		return x.RequiresApproval
	}
	return 0
}

func (x *Campaign) GetIsRedFlagged() int32 {
	if x != nil {
		return x.IsRedFlagged
	}
	return 0
}

func (x *Campaign) GetDeliveryType() int32 {
	if x != nil {
		return x.DeliveryType
	}
	return 0
}

func (x *Campaign) GetDeliveryPriority() int32 {
	if x != nil {
		return x.DeliveryPriority
	}
	return 0
}

func (x *Campaign) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Campaign) GetCrId() int32 {
	if x != nil {
		return x.CrId
	}
	return 0
}

func (x *Campaign) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Campaign) GetNthImp() string {
	if x != nil {
		return x.NthImp
	}
	return ""
}

func (x *Campaign) GetVariance() float64 {
	if x != nil {
		return x.Variance
	}
	return 0
}

func (x *Campaign) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *Campaign) GetDeliverySlabCtr() string {
	if x != nil {
		return x.DeliverySlabCtr
	}
	return ""
}

func (x *Campaign) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Campaign) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Campaign) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Campaign) GetOnboardedAt() string {
	if x != nil {
		return x.OnboardedAt
	}
	return ""
}

func (x *Campaign) GetCreatedBy() int32 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *Campaign) GetCurrentCtr() float64 {
	if x != nil {
		return x.CurrentCtr
	}
	return 0
}

func (x *Campaign) GetZoneCtr() string {
	if x != nil {
		return x.ZoneCtr
	}
	return ""
}

func (x *Campaign) GetOptimizationTypeId() int32 {
	if x != nil {
		return x.OptimizationTypeId
	}
	return 0
}

func (x *Campaign) GetDeliverFrom() int32 {
	if x != nil {
		return x.DeliverFrom
	}
	return 0
}

func (x *Campaign) GetRoDate() string {
	if x != nil {
		return x.RoDate
	}
	return ""
}

func (x *Campaign) GetCreativesType() string {
	if x != nil {
		return x.CreativesType
	}
	return ""
}

func (x *Campaign) GetPerfBiddingRate() int32 {
	if x != nil {
		return x.PerfBiddingRate
	}
	return 0
}

func (x *Campaign) GetVBillingRate() float64 {
	if x != nil {
		return x.VBillingRate
	}
	return 0
}

func (x *Campaign) GetLeadId() int32 {
	if x != nil {
		return x.LeadId
	}
	return 0
}

func (x *Campaign) GetOptimizationEntityId() int32 {
	if x != nil {
		return x.OptimizationEntityId
	}
	return 0
}

func (x *Campaign) GetContextTargetingParameters() string {
	if x != nil {
		return x.ContextTargetingParameters
	}
	return ""
}

func (x *Campaign) GetThirdPartySource() int32 {
	if x != nil {
		return x.ThirdPartySource
	}
	return 0
}

func (x *Campaign) GetTqi() float64 {
	if x != nil {
		return x.Tqi
	}
	return 0
}

func (x *Campaign) GetIntradayOsi() float64 {
	if x != nil {
		return x.IntradayOsi
	}
	return 0
}

func (x *Campaign) GetHasKeywordTargeting() int32 {
	if x != nil {
		return x.HasKeywordTargeting
	}
	return 0
}

func (x *Campaign) GetClicksToDeliver() int32 {
	if x != nil {
		return x.ClicksToDeliver
	}
	return 0
}

func (x *Campaign) GetIsContentCampaign() int32 {
	if x != nil {
		return x.IsContentCampaign
	}
	return 0
}

func (x *Campaign) GetCampaignClassificationId() int32 {
	if x != nil {
		return x.CampaignClassificationId
	}
	return 0
}

func (x *Campaign) GetCxInventoryHonoured() int32 {
	if x != nil {
		return x.CxInventoryHonoured
	}
	return 0
}

func (x *Campaign) GetDanTargetingParameters() string {
	if x != nil {
		return x.DanTargetingParameters
	}
	return ""
}

func (x *Campaign) GetPerfSliderValue() string {
	if x != nil {
		return x.PerfSliderValue
	}
	return ""
}

func (x *Campaign) GetDeliveryModeId() int32 {
	if x != nil {
		return x.DeliveryModeId
	}
	return 0
}

func (x *Campaign) GetCxPacedReachMaximised() int32 {
	if x != nil {
		return x.CxPacedReachMaximised
	}
	return 0
}

func (x *Campaign) GetSecondaryGoalBillingRate() float64 {
	if x != nil {
		return x.SecondaryGoalBillingRate
	}
	return 0
}

func (x *Campaign) GetHostAppId() string {
	if x != nil {
		return x.HostAppId
	}
	return ""
}

func (x *Campaign) GetOptimizationGroupId() string {
	if x != nil {
		return x.OptimizationGroupId
	}
	return ""
}

type CarouselBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BannerId  int32  `protobuf:"varint,2,opt,name=banner_id,json=bannerId,proto3" json:"banner_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Data      string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	StatusId  int64  `protobuf:"varint,5,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	CreatedAt string `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CarouselBanner) Reset() {
	*x = CarouselBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarouselBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarouselBanner) ProtoMessage() {}

func (x *CarouselBanner) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarouselBanner.ProtoReflect.Descriptor instead.
func (*CarouselBanner) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{1}
}

func (x *CarouselBanner) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CarouselBanner) GetBannerId() int32 {
	if x != nil {
		return x.BannerId
	}
	return 0
}

func (x *CarouselBanner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CarouselBanner) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CarouselBanner) GetStatusId() int64 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *CarouselBanner) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CarouselBanner) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Banner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CampaignId int32   `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	TypeId     int32   `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	SubtypeId  int32   `protobuf:"varint,4,opt,name=subtype_id,json=subtypeId,proto3" json:"subtype_id,omitempty"`
	Name       string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Data       string  `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Ecpm       float64 `protobuf:"fixed64,7,opt,name=ecpm,proto3" json:"ecpm,omitempty"`
	Weightage  int32   `protobuf:"varint,8,opt,name=weightage,proto3" json:"weightage,omitempty"`
}

func (x *Banner) Reset() {
	*x = Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Banner) ProtoMessage() {}

func (x *Banner) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Banner.ProtoReflect.Descriptor instead.
func (*Banner) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{2}
}

func (x *Banner) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Banner) GetCampaignId() int32 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *Banner) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *Banner) GetSubtypeId() int32 {
	if x != nil {
		return x.SubtypeId
	}
	return 0
}

func (x *Banner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Banner) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Banner) GetEcpm() float64 {
	if x != nil {
		return x.Ecpm
	}
	return 0
}

func (x *Banner) GetWeightage() int32 {
	if x != nil {
		return x.Weightage
	}
	return 0
}

type Affiliate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RequirementId int64   `protobuf:"varint,2,opt,name=requirement_id,json=requirementId,proto3" json:"requirement_id,omitempty"`
	UserId        int64   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Payout        float32 `protobuf:"fixed32,4,opt,name=payout,proto3" json:"payout,omitempty"`
	Inventory     int64   `protobuf:"varint,5,opt,name=inventory,proto3" json:"inventory,omitempty"`
	EventInfo     string  `protobuf:"bytes,6,opt,name=event_info,json=eventInfo,proto3" json:"event_info,omitempty"`
	CreatedAt     string  `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string  `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Affiliate) Reset() {
	*x = Affiliate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Affiliate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Affiliate) ProtoMessage() {}

func (x *Affiliate) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Affiliate.ProtoReflect.Descriptor instead.
func (*Affiliate) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{3}
}

func (x *Affiliate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Affiliate) GetRequirementId() int64 {
	if x != nil {
		return x.RequirementId
	}
	return 0
}

func (x *Affiliate) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Affiliate) GetPayout() float32 {
	if x != nil {
		return x.Payout
	}
	return 0
}

func (x *Affiliate) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Affiliate) GetEventInfo() string {
	if x != nil {
		return x.EventInfo
	}
	return ""
}

func (x *Affiliate) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Affiliate) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type IdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []int64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *IdList) Reset() {
	*x = IdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdList) ProtoMessage() {}

func (x *IdList) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdList.ProtoReflect.Descriptor instead.
func (*IdList) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{4}
}

func (x *IdList) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str []string `protobuf:"bytes,1,rep,name=str,proto3" json:"str,omitempty"`
}

func (x *StringList) Reset() {
	*x = StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{5}
}

func (x *StringList) GetStr() []string {
	if x != nil {
		return x.Str
	}
	return nil
}

type EntityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               []int64  `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	PrimaryEventName []string `protobuf:"bytes,2,rep,name=primary_event_name,json=primaryEventName,proto3" json:"primary_event_name,omitempty"`
}

func (x *EntityInfo) Reset() {
	*x = EntityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityInfo) ProtoMessage() {}

func (x *EntityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityInfo.ProtoReflect.Descriptor instead.
func (*EntityInfo) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{6}
}

func (x *EntityInfo) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EntityInfo) GetPrimaryEventName() []string {
	if x != nil {
		return x.PrimaryEventName
	}
	return nil
}

var File_Data_proto protoreflect.FileDescriptor

var file_Data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0xd5, 0x1c, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x61, 0x73, 0x52, 0x65, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x5f,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64,
	0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x12, 0x26, 0x0a,
	0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x70,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x43, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x61,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x61, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70,
	0x41, 0x75, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x63, 0x70, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x65, 0x63, 0x70, 0x6d, 0x12,
	0x15, 0x0a, 0x06, 0x76, 0x5f, 0x65, 0x63, 0x70, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x45, 0x63, 0x70, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x5f, 0x63, 0x70, 0x69, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x43, 0x70, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x65, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x65, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x65, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x65, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x65, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x65, 0x70, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x61, 0x73, 0x43, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x62, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x6c, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x73, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x75, 0x73, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x64,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x69, 0x73, 0x52, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x74, 0x68, 0x5f, 0x69, 0x6d, 0x70, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x74, 0x68, 0x49, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x63, 0x74, 0x72, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x6c, 0x61, 0x62, 0x43, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x74, 0x72, 0x18, 0x48, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x63,
	0x74, 0x72, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x43, 0x74,
	0x72, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x62,
	0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x76, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x71, 0x69, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x71, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x72, 0x61, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x73, 0x69, 0x18, 0x55, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x64, 0x61, 0x79, 0x4f, 0x73, 0x69, 0x12, 0x32, 0x0a, 0x15,
	0x68, 0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x56, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x68, 0x61, 0x73,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x57, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x3c, 0x0a, 0x1a,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x59, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x78,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75,
	0x72, 0x65, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x78, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x18, 0x64, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x64, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66,
	0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x5c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x63, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x63, 0x78, 0x50, 0x61, 0x63, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4d, 0x61,
	0x78, 0x69, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x47, 0x6f, 0x61, 0x6c, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x43,
	0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcb, 0x01,
	0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x70,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x65, 0x63, 0x70, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x61, 0x67, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x09,
	0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x18, 0x0a, 0x06,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x22, 0x4a, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Data_proto_rawDescOnce sync.Once
	file_Data_proto_rawDescData = file_Data_proto_rawDesc
)

func file_Data_proto_rawDescGZIP() []byte {
	file_Data_proto_rawDescOnce.Do(func() {
		file_Data_proto_rawDescData = protoimpl.X.CompressGZIP(file_Data_proto_rawDescData)
	})
	return file_Data_proto_rawDescData
}

var file_Data_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_Data_proto_goTypes = []interface{}{
	(*Campaign)(nil),       // 0: main.Campaign
	(*CarouselBanner)(nil), // 1: main.CarouselBanner
	(*Banner)(nil),         // 2: main.Banner
	(*Affiliate)(nil),      // 3: main.Affiliate
	(*IdList)(nil),         // 4: main.IdList
	(*StringList)(nil),     // 5: main.StringList
	(*EntityInfo)(nil),     // 6: main.EntityInfo
}
var file_Data_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Data_proto_init() }
func file_Data_proto_init() {
	if File_Data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Campaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarouselBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Affiliate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Data_proto_goTypes,
		DependencyIndexes: file_Data_proto_depIdxs,
		MessageInfos:      file_Data_proto_msgTypes,
	}.Build()
	File_Data_proto = out.File
	file_Data_proto_rawDesc = nil
	file_Data_proto_goTypes = nil
	file_Data_proto_depIdxs = nil
}
